services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - kafka-spark-streaming

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    networks:
      - kafka-spark-streaming

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    depends_on:
      - kafka
    command: bin/spark-class org.apache.spark.deploy.master.Master
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - kafka-spark-streaming
    volumes:
      - ./jars/postgresql-42.3.3.jar:/opt/bitnami/spark/jars/postgresql-42.3.3.jar


  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    depends_on:
      - spark-master
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - kafka-spark-streaming
    volumes:
     - ./jars/postgresql-42.3.3.jar:/opt/bitnami/spark/jars/postgresql-42.3.3.jar


  
      
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postpass
      POSTGRES_DB: kafka_streaming
    ports:
      - "5432:5432"
    networks:
      - kafka-spark-streaming
    volumes:
      - postgres_data:/var/lib/postgresql/data


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    
    networks:
      - kafka-spark-streaming
    depends_on:
      - postgres
    volumes:
      - grafana_data:/var/lib/grafana

  mysql_source:
    image: mysql:latest
    container_name: mysql_source
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: source_db
      MYSQL_USER: user
      MYSQL_PASSWORD: userpass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kafka-spark-streaming

  kafka-producer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      - mysql_source
    entrypoint: ["sh", "-c", "sleep 10 && python3 kafka_producer.py"]
    networks:
      - kafka-spark-streaming


volumes:
  postgres_data:
  grafana_data:
  mysql_data:

networks:
  kafka-spark-streaming:
    driver: bridge
    
